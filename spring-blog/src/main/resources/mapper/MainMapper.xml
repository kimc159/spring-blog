<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.project.chat.main.mapper.MainMapper">
		
	<insert id="join" parameterType="com.project.chat.member.MemberVO" 
	>
		insert into 
			member (
				memId,
				memPassword,
				memName,
				memBirthDay,
				memGender,
				memEmail,
				memPhone,
				salt
			)
		values ( 
			#{memId},
			#{memPassword},
			#{memName},
			#{memBirthDay},
			#{memGender}, 
			#{memEmail},
			#{memPhone},
			#{salt}
		)
	</insert>
	
	<update id="modify" parameterType="com.project.chat.member.MemberVO">
		update
			member
		set
			memPassword = #{memPassword},
			memName = #{memName},
			memBirthDay = #{memBirthDay},
			memGender = #{memGender},
			memEmail = #{memEmail},
			memPhone = #{memPhone},
			authKey = 0,
			authStatus = 0,
			salt = #{salt}
		where 
			memId = #{memId}
	</update>
	
	<update id="updateAuthKey" parameterType="hashMap" >
		update member set AUTHKEY = #{authKey} where memEmail = #{email}
	</update>
	 
	<select id="login" resultType="com.project.chat.login.LoginVO">
		select
			*
		from
			member
		where
			memId = #{memId}
	</select> 
		
	<select id="salt" resultType="String">
		select 
			salt
		from 
			member
		where 
			memId = #{memID}
	</select>
	
	<select id="findId" resultType="String">
		select 
			memId
		from
			member
		where
			memEmail = #{memEmail}
	</select>
	
	<select id="findPassword" resultType="int">
		select 
			count(memPassword)
		from
			member
		where 
			memId = #{memId}
		and
			memEmail = #{memEmail}
	</select>
	
	<update id="updatePassword" parameterType="hashMap">
		update
			member
		set
			memPassword = #{memPassword},
			salt = #{salt}
		where
			memId = #{memId}
		and
			memEmail = #{memEmail}
	</update>
	
	<select id="idCheck" resultType="int">
		select
			count(*)
		from
			member
		where
			memId = #{memId}
	</select>
	<select id="selectMember" resultType="com.project.chat.member.MemberVO">
		select
			*
		from
			member
		where
			memId = #{memId}
	</select>
	<update id="joinConfirm" parameterType="hashMap">
		update 
			member
		set
			authStatus = 1
		where
			memEmail = #{email}
		and
			authKey = #{authKey}
	</update>
	<select id="memberAuthStatus" parameterType="com.project.chat.login.LoginVO" resultType="int">
		select
			authStatus
		from
			member
		where
			memId = #{memId}
	</select>
	<select id="selectRoom" parameterType="com.project.chat.RoomVO" resultType="com.project.chat.RoomVO"> 
		select 
			* 
		from
			chat_room
		where
			(
				from_id = #{from_id}
				and
				to_id = #{to_id}
			)
		OR
			(
				from_id = #{to_id}
				and
				to_id = #{from_id}
			)
			
	</select>
	<insert id="insertRoom" parameterType="com.project.chat.RoomVO">
		<selectKey keyProperty="room_id" resultType="int" order="BEFORE">
			select 
				room_id_sequence.nextval 
			from
				DUAL 
		</selectKey>
		insert into 
			chat_room (
				  room_id
				, to_id
				, from_id
			)
		values	(
				  #{room_id}
				, #{to_id}
				, #{from_id}
			)
	</insert> 
	<select id="chatList" parameterType="com.project.chat.RoomVO" resultType="com.project.chat.ChatMessageVO">
		select
			*
		from
			chat_message
		where
			(
				from_id = #{from_id}
				and
				to_id = #{to_id}
				and
				room_id = #{room_id}
			)
		OR
			(
				from_id = #{to_id}
				and
				to_id = #{from_id}
				and
				room_id = #{room_id}
			)
		order by time
	</select>
	<select id="lastChatList" parameterType="com.project.chat.RoomVO" resultType="com.project.chat.ChatMessageVO">
		select * from (
			select
				  chat.*
				, row_number() over(order by time desc) as num
			from
				chat_message chat
			where
				(
					chat.from_id = #{from_id}
					and
					chat.to_id = #{to_id}
					and
					chat.room_id = #{room_id}
				)
			OR
				(
					chat.from_id = #{to_id}
					and
					chat.to_id = #{from_id}
					and
					chat.room_id = #{room_id}
				)
			)
		where num = 1;
	</select>
	<insert id="insertMessage" parameterType="hashMap"> 
		<selectKey keyProperty="message_id" resultType="int" order="BEFORE">
			select 
				message_id_sequence.nextval 
			from
				DUAL
		</selectKey>
		insert into 
			chat_message (
				  message_id
				, message
				, time
				, room_id
				, to_id
				, from_id
			)
		values	(
				  #{message_id} 
				, #{message}
				, to_date(#{time}, 'YYYY-MM-DD HH24:MI:SS')  
				, #{room_id}
				, #{to_id} 
				, #{from_id}
			)
	</insert> 
	<select id="chatRoomList" parameterType="String" resultType="com.project.chat.RoomVO">  
		select
			*
		from
			chat_room
		where
			from_id = #{user_id}
		OR
			to_id = #{user_id}
	</select>
</mapper>